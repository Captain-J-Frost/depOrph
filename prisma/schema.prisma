generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donor {
  id            Int           @id @default(autoincrement())
  created_at    DateTime?     @default(now())
  updated_at    DateTime?
  companyName   String        @default("")
  nameInitials  String        @default("")
  userId        Int?
  coordinatorId Int?
  coordinator   Coordinator?  @relation(fields: [coordinatorId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])
  orphans       Orphan[]      @relation("donorToorphan")
  villages      Village[]     @relation("donorTovillage")
  supportPlans  SupportPlan[] @relation("donorTosupportplan")

  @@map("donor")
}

model Education {
  id                 Int                             @id @default(autoincrement())
  created_at         DateTime?                       @default(now())
  updated_at         DateTime?
  enrollmentStatus   education_enrollmentstatus_enum @default(unenrolled)
  schoolName         String?
  typeOfSchool       education_typeofschool_enum?
  year               String?
  level              education_level_enum?
  reason             String?
  educationalRecords EducationalRecord[]             @relation("educationToeducationalrecord")
  orphan             Orphan[]                        @relation("educationToorphan")

  @@map("education")
}

model Father {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  firstName           String    @default("")
  lastName            String    @default("")
  dateOfDeath         DateTime  @default("1970-01-01T00:00:00.000Z")
  causeOfDeath        String    @default("")
  dateOfBirth         DateTime  @default("1970-01-01T00:00:00.000Z")
  deathCertificateUrl String    @default("")
  orphans             Orphan[]  @relation("fatherToorphan")

  @@map("father")
}

model Guardian {
  id                                 Int                            @id @default(autoincrement())
  created_at                         DateTime?                      @default(now())
  updated_at                         DateTime?
  firstName                          String                         @default("")
  middleName                         String                         @default("")
  lastName                           String                         @default("")
  gender                             guardian_gender_enum           @default(M)
  dateOfBirth                        DateTime                       @default("1970-01-01T00:00:00.000Z")
  relationToOrphan                   guardian_relationtoorphan_enum @default(mother)
  email                              String                         @default("")
  moblieNumber                       String                         @default("")
  telephoneNumber                    String?
  nationality                        guardian_nationality_enum      @default(Ethiopian)
  guardianIDCardUrl                  String                         @default("")
  guardianConfirmationLetterUrl      String                         @default("")
  guardianLegalConfirmationLetterUrl String                         @default("")
  orphans                            Orphan[]                       @relation("guardianToorphan")

  @@map("guardian")
}

model Mother {
  id             Int                   @id @default(autoincrement())
  created_at     DateTime?             @default(now())
  updated_at     DateTime?
  firstName      String                @default("")
  middleName     String                @default("")
  lastName       String                @default("")
  vitalStatus    mother_vitalStatus    @default(alive)
  dateOfBirth    DateTime              @default("1970-01-01T00:00:00.000Z")
  dateOfDeath    DateTime?
  causeOfDeath   String?
  mobileNumber   String                @default("")
  maritalStatus  mother_maritalStatus?
  monthlyExpense Float                 @default(0)
  jobs           MotherJob[]           @relation("motherTomotherjob")
  orphans        Orphan[]              @relation("motherToorphan")

  @@map("mother")
}

model MotherJob {
  id            Int       @id @default(autoincrement())
  created_at    DateTime? @default(now())
  updated_at    DateTime?
  jobTitle      String?
  monthlyIncome Float?
  initDate      DateTime?
  termDate      DateTime?
  motherId      Int?
  mother        Mother?   @relation("motherTomotherjob", fields: [motherId], references: [id])

  @@map("motherjob")
}

model Region {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  name       String    @default("")
  zones      Zone[]

  @@map("region")
}

model Zone {
  id         Int        @id @default(autoincrement())
  created_at DateTime?  @default(now())
  updated_at DateTime?
  name       String     @default("")
  regionId   Int?
  region     Region?    @relation(fields: [regionId], references: [id])
  districts  District[]

  @@map("zone")
}

model District {
  id            Int            @id @default(autoincrement())
  created_at    DateTime?      @default(now())
  updated_at    DateTime?
  name          String         @default("")
  zoneId        Int?
  coordinatorId Int?
  coordinator   Coordinator?   @relation(fields: [coordinatorId], references: [id])
  zone          Zone?          @relation(fields: [zoneId], references: [id])
  villages      Village[]
  socialWorkers SocialWorker[] @relation("districtTosocialworker")

  @@map("district")
}

model Village {
  id               Int          @id @default(autoincrement())
  created_at       DateTime?    @default(now())
  updated_at       DateTime?
  registrationDate DateTime     @default("1970-01-01T00:00:00.000Z")
  name             String?
  districtId       Int?
  donorId          Int?
  coordinatorId    Int?
  coordinator      Coordinator? @relation(fields: [coordinatorId], references: [id])
  district         District?    @relation(fields: [districtId], references: [id])
  donor            Donor?       @relation("donorTovillage", fields: [donorId], references: [id])
  orphans          Orphan[]     @relation("orphanTovillage")

  @@map("village")
}

model Orphan {
  id                     Int                              @id @default(autoincrement())
  created_at             DateTime?                        @default(now())
  updated_at             DateTime?
  firstName              String                           @default("")
  gender                 orphan_gender_enum               @default(M)
  placeOfBirth           String                           @default("")
  dateOfBirth            DateTime                         @default("1970-01-01T00:00:00.000Z")
  spokenLanguages        String?
  gradeAgeMismatchReason String?
  hobbies                String?
  religion               orphan_religion_enum?
  idCardUrl              String?
  passportUrl            String?
  thankyouLetterUrl      String?
  birthCertificateUrl    String                           @default("")
  healthDescription      String                           @default("")
  psychologicalStatus    orphan_psychologicalstatus_enum?
  accountNumber          String?
  currentBalance         Float?
  motherId               Int?
  fatherId               Int?
  guardianId             Int?
  educationId            Int?
  donorId                Int?
  supportPlanId          Int?
  villageId              Int?
  socialWorkerId         Int?
  house_propertyId       Int?
  donor                  Donor?                           @relation("donorToorphan", fields: [donorId], references: [id])
  education              Education?                       @relation("educationToorphan", fields: [educationId], references: [id])
  father                 Father?                          @relation("fatherToorphan", fields: [fatherId], references: [id])
  guardian               Guardian?                        @relation("guardianToorphan", fields: [guardianId], references: [id])
  house_property         House_property?                  @relation("house_propertyToorphan", fields: [house_propertyId], references: [id])
  mother                 Mother?                          @relation("motherToorphan", fields: [motherId], references: [id])
  village                Village?                         @relation("orphanTovillage", fields: [villageId], references: [id])
  socialWorker           SocialWorker?                    @relation("orphanTosocialworker", fields: [socialWorkerId], references: [id])
  supportPlan            SupportPlan?                     @relation("orphanTosupportplan", fields: [supportPlanId], references: [id])
  financialRecords       FinancialRecord[]                @relation("financialrecordToorphan")
  healthRecords          HealthRecord[]                   @relation("healthrecordToorphan")
  photos                 OrphanPhotos[]                   @relation("orphanToorphanphotos")
  sponsorshipStatuses    SponsorshipStatus[]              @relation("orphanTosponsorshipstatus")
  siblings               Orphan[]                         @relation("orphan_sibling")
  siblingOf              Orphan[]                         @relation("orphan_sibling")

  @@map("orphan")
}

model SocialWorker {
  id           Int                       @id @default(autoincrement())
  created_at   DateTime?                 @default(now())
  updated_at   DateTime?
  firstName    String                    @default("")
  middleName   String                    @default("")
  lastName     String                    @default("")
  gender       socialworker_gender_enum?
  dateOfBirth  DateTime?
  mobileNumber String                    @default("")
  email        String                    @default("")
  initDate     DateTime?
  termDate     DateTime?
  districtId   Int?
  userId       Int?
  user         User?                     @relation(fields: [userId], references: [id])
  district     District?                 @relation("districtTosocialworker", fields: [districtId], references: [id])
  orphans      Orphan[]                  @relation("orphanTosocialworker")

  @@map("socialworker")
}

model EducationalRecord {
  id               Int                                  @id @default(autoincrement())
  created_at       DateTime?                            @default(now())
  updated_at       DateTime?
  yearDivision     educationalrecord_yeardivision_enum?
  quarter          educationalrecord_quarter_enum?
  semester         educationalrecord_semester_enum?
  totalMark        Float?
  numberOfSubjects Int?
  average          Float?
  rank             Int?
  reportCardUrl    String?
  semesterGPA      Float?
  cumulativeGPA    Float?
  educationId      Int?
  education        Education?                           @relation("educationToeducationalrecord", fields: [educationId], references: [id])

  @@map("educationalrecord")
}

model FinancialRecord {
  id                Int                          @id @default(autoincrement())
  created_at        DateTime?                    @default(now())
  updated_at        DateTime?
  transactionDate   DateTime?
  transactionType   transaction_type_enum?
  amount            Float?
  reason            financialrecord_reason_enum?
  specialCaseReason String?
  orphanId          Int?
  orphan            Orphan?                      @relation("financialrecordToorphan", fields: [orphanId], references: [id])

  @@map("financialrecord")
}

model HealthRecord {
  id                   Int       @id @default(autoincrement())
  created_at           DateTime? @default(now())
  updated_at           DateTime?
  medicalCerificateUrl String?
  orphanId             Int?
  orphan               Orphan?   @relation("healthrecordToorphan", fields: [orphanId], references: [id])

  @@map("healthrecord")
}

model House_property {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  housingSituation String    @default("")
  otherProperty    String?
  orphans          Orphan[]  @relation("house_propertyToorphan")

  @@map("house_property")
}

model OrphanPhotos {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  photoPortraitUrl String    @default("")
  photoLongUrl     String?
  orphanId         Int?
  orphan           Orphan?   @relation("orphanToorphanphotos", fields: [orphanId], references: [id])

  @@map("orphanphotos")
}

model SponsorshipStatus {
  id         Int                     @id @default(autoincrement())
  created_at DateTime?               @default(now())
  updated_at DateTime?
  status     sponsorshipstatus_enum?
  date       DateTime                @default("1970-01-01T00:00:00.000Z")
  orphanId   Int?
  orphan     Orphan?                 @relation("orphanTosponsorshipstatus", fields: [orphanId], references: [id])

  @@map("sponsorshipstatus")
}

model SupportPlan {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime? @default(now())
  updated_at         DateTime?
  collectiveFund_fc  Float?
  individualFund_fc  Float?
  foreignCurrency    String?
  supportPeriod      Int?
  exchangeRate       Float?
  individualFund_brr Float?
  adminFee_brr       Float?
  netPayment_brr     Float?
  initDate           DateTime?
  termDate           DateTime?
  donorId            Int?
  donor              Donor?    @relation("donorTosupportplan", fields: [donorId], references: [id])
  orphans            Orphan[]  @relation("orphanTosupportplan")

  @@map("supportplan")
}

model Head {
  // 🚀
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  firstName  String    @default("")
  middleName String    @default("")
  lastName   String    @default("")
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])

  @@map("head")
}

model Coordinator {
  id         Int        @id @default(autoincrement())
  created_at DateTime?  @default(now())
  updated_at DateTime?
  firstName  String     @default("")
  middleName String     @default("")
  lastName   String     @default("")
  userId     Int?
  user       User?      @relation(fields: [userId], references: [id])
  villages   Village[]
  districts  District[]
  donors     Donor[]

  @@map("coordinator")
}

model User {
  id            Int            @id @default(autoincrement())
  created_at    DateTime?      @default(now())
  updated_at    DateTime?
  role          userRoles_enum @default(Guest)
  email         String         @default("")
  password      String?
  coordinators  Coordinator[]
  heads         Head[]
  socialworkers SocialWorker[]
  donors        Donor[]

  @@map("user")
}

enum education_enrollmentstatus_enum {
  enrolled
  unenrolled
  droppedout
}

enum education_level_enum {
  religiousEducation
  preSchool
  gradeSchool
  underGraduate
  postGraduate
  N_A                 @map("N/A")
}

enum education_typeofschool_enum {
  private
  public
  N_A      @map("N/A")
}

enum educationalrecord_quarter_enum {
  first
  second
  third
  fourth
}

enum educationalrecord_semester_enum {
  first
  second
}

enum educationalrecord_yeardivision_enum {
  semester
  quarter_term
}

enum financialrecord_reason_enum {
  ASFC
  RSFC
  AAB
  AFB
  NPB
  EW
  HW
  NW
  SCW
}

enum guardian_gender_enum {
  M
  F
}

enum guardian_relationtoorphan_enum {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
  legalGuardian
}

enum guardian_nationality_enum {
  Djiboutian
  Ethiopian
  Eritrean
  Kenyan
  Somali
  South_Sudanese
  Sudanese
}

enum mother_maritalStatus {
  married
  widow
  N_A      @map("N/A")
}

enum mother_vitalStatus {
  passed
  alive
}

enum orphan_gender_enum {
  M
  F
}

enum orphan_psychologicalstatus_enum {
  isolated
  stressed
  unsociable
  overlysociable
  normal
}

enum orphan_religion_enum {
  Christianity
  Islam
  Buddhism
  Hinduism
  Judaism
  Other
}

enum socialworker_gender_enum {
  M
  F
}

enum sponsorshipstatus_enum {
  processing
  pending
  active
  graduated
}

enum transaction_type_enum {
  withdrawal
  deposit
  assign
  re_assign
}

enum userRoles_enum {
  Admin
  Head
  Coordinator
  Donor
  SocailWorker
  Guest
}
